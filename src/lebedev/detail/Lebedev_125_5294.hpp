
#pragma once

#include <array>
#include <tuple>

#include <Eigen/Core>

#include "lebedev_utils.hpp"
#include "utils/meta_utils.hpp"


namespace detail {
class Lebedev_125_5294 final
{
private:
  /** Number of points in A1 block */
  static constexpr auto N_a1 = 6;
  /** Quadrature weight in A1 block */
  static constexpr auto a1 = 9.0805107643e-05;

  /** Number of points in A3 block */
  static constexpr auto N_a3 = 8;
  /** Quadrature weight in A3 block */
  static constexpr auto a3 = 0.000208482436199;

  /** Number of points in each PQ0 block */
  static constexpr auto N_pq0 = 24;
  /** Quadrature weight(s) and point(s) in PQ0 block.
   *
   * Each element is a {weight, x} tuple. The actual quadrature point in Cartesian coordinates is computed as \f$(p, q,
   * 0) = (\sin(x * \pi), \cos(x * \pi), 0)\f$
   */
  static constexpr std::array<std::array<double, 2>, 10> pq0 = { { { { 7.5917081174e-05, 0.0122272800733374 } },
                                                                   { { 0.000108338396817, 0.031358021314585115 } },
                                                                   { { 0.000140301939529, 0.05327159232476883 } },
                                                                   { { 0.000161597017929, 0.07733443578088112 } },
                                                                   { { 0.00017711441875, 0.10251681487866783 } },
                                                                   { { 0.000188776002299, 0.12847228711290487 } },
                                                                   { { 0.000197347467077, 0.15498299192569068 } },
                                                                   { { 0.000203378766123, 0.18187924973307468 } },
                                                                   { { 0.000207234362652, 0.20903016391066756 } },
                                                                   { { 0.000209117783423, 0.2363274194008368 } } } };

  /** Number of points in each LLM block */
  static constexpr auto N_llm = 24;
  /** Quadrature weight(s) and point(s) in LLM block.
   *
   * Each element is a {weight, x} tuple. The actual quadrature point in Cartesian coordinates is computed as
   * \f$(l, l, m) = (\frac{\sin(x * \pi)}{\sqrt{2}}, \frac{\sin(x * \pi)}{\sqrt{2}}, \cos(x * \pi))\f$
   */
  static constexpr std::array<std::array<double, 2>, 30> llm = {
    { { { 5.0111056572e-05, 0.010370154728179072 } }, { { 5.9425204097e-05, 0.016921349905386622 } },
      { { 9.5643948261e-05, 0.026237512831250583 } }, { { 0.000118553065713, 0.0379169709701096 } },
      { { 0.000136451011423, 0.0507644298779388 } },  { { 0.000150582882561, 0.06436585073662636 } },
      { { 0.000161929874987, 0.0785087060996483 } },  { { 0.000171245050427, 0.09307034997457828 } },
      { { 0.000178989109816, 0.10797423771743253 } }, { { 0.000185447495563, 0.12316928382347049 } },
      { { 0.000190814863667, 0.13861967848048073 } }, { { 0.000195237740528, 0.15429949627873993 } },
      { { 0.000198834925428, 0.17018980238335438 } }, { { 0.000201707980716, 0.18627708646592972 } },
      { { 0.000203947308271, 0.20255235349932824 } }, { { 0.000205636027929, 0.21901051941436284 } },
      { { 0.000206852582307, 0.23564994889491964 } }, { { 0.000207672487753, 0.25247206217045837 } },
      { { 0.000208169427824, 0.2694809690338038 } },  { { 0.000208415763122, 0.2866830912891763 } },
      { { 0.000208438153113, 0.32170146690868673 } }, { { 0.000208347627713, 0.33953743424370153 } },
      { { 0.000208268619446, 0.35760412753497606 } }, { { 0.000208247568611, 0.3759088478631594 } },
      { { 0.000208313986029, 0.3944545521917069 } },  { { 0.000208474556183, 0.41323716441219555 } },
      { { 0.000208709131338, 0.4322425704684371 } },  { { 0.00020897184133, 0.45144385720653785 } },
      { { 0.000209200330348, 0.4707997141844027 } },  { { 0.000209333614826, 0.49025509912850934 } } }
  };

  /** Number of points in each RSW block */
  static constexpr auto N_rsw = 48;
  /** Quadrature weight(s) and point(s) in RSW block.
   *
   * Each element is a {weight, x, y} tuple. The actual quadrature point in Cartesian coordinates is computed as
   * \f$(r, s, w) = (\sin(x * \pi)\cos(y * \pi), \sin(x * \pi)\sin(y * \pi), \cos(x*\pi))\f$
   */
  static constexpr std::array<std::array<double, 3>, 90> rsw = {
    { { { 9.3166844847e-05, 0.022081809907520338, 0.09012636296744164 } },
      { { 0.000111619368868, 0.03303389945888849, 0.1346442931603896 } },
      { { 0.000129862355156, 0.04525210350388219, 0.15950767583470055 } },
      { { 0.000145023683246, 0.05838935640593082, 0.17561712910914978 } },
      { { 0.000157271995815, 0.07217284560667382, 0.18699113302697762 } },
      { { 0.000167323478587, 0.08644508443751665, 0.19542637654942827 } },
      { { 0.000175686011873, 0.10110878625952792, 0.20191730688850307 } },
      { { 0.000182677629044, 0.11609905098916502, 0.20706589456111046 } },
      { { 0.000188511634799, 0.13137056480756018, 0.2112527875091941 } },
      { { 0.000193345786017, 0.14689075034997995, 0.21472744934880078 } },
      { { 0.00019730606719, 0.1626358121853319, 0.21765940322029603 } },
      { { 0.000200498709962, 0.17858847420281362, 0.22016781632878143 } },
      { { 0.000203017090928, 0.19473667446532816, 0.22233885028263625 } },
      { { 0.000204946146012, 0.21107275091530697, 0.2242361770430969 } },
      { { 0.00020636535652, 0.22759286517745056, 0.2259076302806007 } },
      { { 0.000207350792738, 0.24429654404542667, 0.22738958536386672 } },
      { { 0.000207976459326, 0.261186278622972, 0.22870993735006442 } },
      { { 0.000208315053497, 0.2782671390048192, 0.22989017282376814 } },
      { { 0.000126271512159, 0.04231068152075113, 0.05515512256026261 } },
      { { 0.000141438612855, 0.054589376614723295, 0.09099187634526304 } },
      { { 0.000153874040131, 0.06772486308074946, 0.11609130309265848 } },
      { { 0.000164243494233, 0.08147435576486389, 0.13461361004959066 } },
      { { 0.000172979060924, 0.0957066664273712, 0.14879266648213288 } },
      { { 0.000180350519026, 0.11033448477821067, 0.15997544458093477 } },
      { { 0.000186547535008, 0.12529527766860735, 0.1690189965911007 } },
      { { 0.000191718266968, 0.1405436318767864, 0.17648652695422162 } },
      { { 0.000195985170903, 0.15604637053459755, 0.18275983943393823 } },
      { { 0.000199452954812, 0.17177922087650654, 0.18810610095779381 } },
      { { 0.000202213891115, 0.18772469250478985, 0.1927176681190042 } },
      { { 0.000204351802421, 0.20387075949209946, 0.1967362540529479 } },
      { { 0.000205945031302, 0.22020999421672954, 0.20026810539286616 } },
      { { 0.000207068571532, 0.23673893643468683, 0.20339392272465742 } },
      { { 0.000207795531069, 0.25345758522487716, 0.20617557433232722 } },
      { { 0.000208198038782, 0.27036895055700305, 0.20866075859467562 } },
      { { 0.000152131861038, 0.06541943412961183, 0.03941028025430509 } },
      { { 0.000162277272019, 0.07838366927862381, 0.06873763434828653 } },
      { { 0.000171049813942, 0.09196777689757975, 0.09129901797134436 } },
      { { 0.000178591114945, 0.10605258338214514, 0.10912251981954836 } },
      { { 0.000185012531369, 0.12055153978932494, 0.12352966531571986 } },
      { { 0.000190422970393, 0.13540001689357692, 0.13540849558689305 } },
      { { 0.000194925995612, 0.15055025789706813, 0.14536923887551031 } },
      { { 0.000198616154536, 0.16596714863702092, 0.15384162902729173 } },
      { { 0.000201579058564, 0.1816249736445483, 0.16113600597060737 } },
      { { 0.000203893419871, 0.19750524472951309, 0.1674815028240045 } },
      { { 0.000205633406054, 0.2135953106040044, 0.173050272174846 } },
      { { 0.000206870595946, 0.22988742026669648, 0.17797335159579097 } },
      { { 0.000207675390611, 0.24637802734319578, 0.18235142093220438 } },
      { { 0.000208117939173, 0.26306722160214996, 0.18626230107937097 } },
      { { 0.000170034521623, 0.09005428627545445, 0.03079257975297781 } },
      { { 0.000177490677999, 0.10341040526963217, 0.05536128560142009 } },
      { { 0.0001839659377, 0.11728781768718408, 0.07533401069515712 } },
      { { 0.000189498746298, 0.13159904129352548, 0.09185031676141037 } },
      { { 0.000194154880945, 0.14627768423517856, 0.10571891183405266 } },
      { { 0.000198007842725, 0.1612742281004715, 0.11752130645637797 } },
      { { 0.000201129628474, 0.1765519752868946, 0.12768288123464533 } },
      { { 0.000203588845697, 0.19208387677995004, 0.13652050869977778 } },
      { { 0.000205451632535, 0.20785039759940338, 0.14427398585052412 } },
      { { 0.000206783103309, 0.22383813400871805, 0.15112698907187344 } },
      { { 0.000207648532028, 0.24003885901039174, 0.15722142565632113 } },
      { { 0.000208114143953, 0.2564487909395465, 0.1626675425458804 } },
      { { 0.000183438301547, 0.1156225443668364, 0.02532508100578916 } },
      { { 0.000188954059178, 0.12926166315631585, 0.04642844996120459 } },
      { { 0.00019366770236, 0.14334861692059786, 0.06423722763290415 } },
      { { 0.000197617649507, 0.15781772849584919, 0.07944269305847527 } },
      { { 0.000200853600456, 0.1726193921644713, 0.09256320466879381 } },
      { { 0.000203428035171, 0.18771635191499633, 0.10399154701924673 } },
      { { 0.000205394446603, 0.2030808272249597, 0.11402887166058162 } },
      { { 0.000206807764288, 0.21869258580978418, 0.12290839869853407 } },
      { { 0.000207725094966, 0.23453767669697423, 0.13081203498008256 } },
      { { 0.000208206244071, 0.2506075221905784, 0.13788228024837046 } },
      { { 0.000193437448655, 0.14185759926245525, 0.021552567328192232 } },
      { { 0.000197410701048, 0.15569779942126724, 0.04006705163172344 } },
      { { 0.000200712929039, 0.16993013808033486, 0.056114816577325075 } },
      { { 0.000203373694747, 0.18450644512314449, 0.07014039441664384 } },
      { { 0.00020542871259, 0.19938994854477599, 0.08249135877802373 } },
      { { 0.000206918493682, 0.21455286714031777, 0.09344118901431282 } },
      { { 0.000207888368981, 0.22997480076438112, 0.10320613363919821 } },
      { { 0.000208388636612, 0.24564164823387824, 0.11195762822953943 } },
      { { 0.000200659327547, 0.1685636990437287, 0.018804643571100836 } },
      { { 0.000203372842614, 0.1825412253459679, 0.035325186761107394 } },
      { { 0.000205500878138, 0.19686989497063076, 0.04993404617015873 } },
      { { 0.000207065178352, 0.21151428543922507, 0.06293041358870975 } },
      { { 0.000208095333509, 0.22644733164035438, 0.07455506125389763 } },
      { { 0.000208628499899, 0.2416490625189963, 0.08500183761206065 } },
      { { 0.000205554938764, 0.19559080497154124, 0.016720321133884327 } },
      { { 0.000207187185027, 0.2096558300595442, 0.03166412502721149 } },
      { { 0.000208285660043, 0.2240409129536197, 0.04508436639190506 } },
      { { 0.000208870585882, 0.2387203398103678, 0.057188455484861234 } },
      { { 0.000208399586754, 0.22282021351432665, 0.01508849379552935 } },
      { { 0.000209050971289, 0.23692998731338194, 0.028756638475066133 } } }
  };

public:
  using Weights = Eigen::VectorXd;
  using Points = Eigen::Matrix3Xd;

  static auto quadrature() -> std::tuple<Weights, Points>
  {
    Weights ws = Weights::Zero(5294);
    Points xs = Points::Zero(3, 5294);

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<0>, Eigen::fix<N_a1>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<0>, Eigen::fix<N_a1>));
      std::tie(ws_, xs_) = detail::a1(a1);
    }

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1>, Eigen::fix<N_a3>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1>, Eigen::fix<N_a3>));
      std::tie(ws_, xs_) = detail::a3(a3);
    }

    // number of pq0 values
    constexpr auto pq0_sz = pq0.size();
    detail::constexpr_for<0, pq0_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a3 + i * N_pq0>, Eigen::fix<N_pq0>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1 + N_a3 + i * N_pq0>, Eigen::fix<N_pq0>));
      std::tie(ws_, xs_) = detail::pq0(pq0[i][0], pq0[i][1]);
    });

    // number of llm values
    constexpr auto llm_sz = llm.size();
    detail::constexpr_for<0, llm_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a3 + pq0.size() * N_pq0 + i * N_llm>, Eigen::fix<N_llm>));
      auto xs_ =
        xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1 + N_a3 + pq0.size() * N_pq0 + i * N_llm>, Eigen::fix<N_llm>));
      std::tie(ws_, xs_) = detail::llm(llm[i][0], llm[i][1]);
    });

    // number of rsw values
    constexpr auto rsw_sz = rsw.size();
    detail::constexpr_for<0, rsw_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(
        Eigen::seqN(Eigen::fix<+N_a1 + N_a3 + pq0.size() * N_pq0 + llm.size() * N_llm + i * N_rsw>, Eigen::fix<N_rsw>));
      auto xs_ = xs(
        Eigen::all,
        Eigen::seqN(Eigen::fix<+N_a1 + N_a3 + pq0.size() * N_pq0 + llm.size() * N_llm + i * N_rsw>, Eigen::fix<N_rsw>));
      std::tie(ws_, xs_) = detail::rsw(rsw[i][0], rsw[i][1], rsw[i][2]);
    });

    return { ws, xs };
  }
};
} // namespace detail

