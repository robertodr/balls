
#pragma once

#include <array>
#include <tuple>

#include <Eigen/Core>

#include "lebedev_utils.hpp"
#include "utils/meta_utils.hpp"


namespace detail {
class Lebedev_107_3890 final
{
private:
  /** Number of points in A1 block */
  static constexpr auto N_a1 = 6;
  /** Quadrature weight in A1 block */
  static constexpr auto a1 = 1.8073952522e-05;

  /** Number of points in A2 block */
  static constexpr auto N_a2 = 12;
  /** Quadrature weight in A2 block */
  static constexpr auto a2 = 0.000284800878224;

  /** Number of points in A3 block */
  static constexpr auto N_a3 = 8;
  /** Quadrature weight in A3 block */
  static constexpr auto a3 = 0.000283606583753;

  /** Number of points in each PQ0 block */
  static constexpr auto N_pq0 = 24;
  /** Quadrature weight(s) and point(s) in PQ0 block.
   *
   * Each element is a {weight, x} tuple. The actual quadrature point in Cartesian coordinates is computed as \f$(p, q,
   * 0) = (\sin(x * \pi), \cos(x * \pi), 0)\f$
   */
  static constexpr std::array<std::array<double, 2>, 8> pq0 = { { { { 0.000105119340697, 0.015068765785941985 } },
                                                                  { { 0.00016578718388, 0.03835680822920328 } },
                                                                  { { 0.000206464811371, 0.06520909095162035 } },
                                                                  { { 0.000234794274582, 0.09406401498682768 } },
                                                                  { { 0.00025477753266, 0.12415729394387427 } },
                                                                  { { 0.000268687668485, 0.15504683778658174 } },
                                                                  { { 0.000277866575552, 0.18644642293553204 } },
                                                                  { { 0.000283099661678, 0.21815146497067894 } } } };

  /** Number of points in each LLM block */
  static constexpr auto N_llm = 24;
  /** Quadrature weight(s) and point(s) in LLM block.
   *
   * Each element is a {weight, x} tuple. The actual quadrature point in Cartesian coordinates is computed as
   * \f$(l, l, m) = (\frac{\sin(x * \pi)}{\sqrt{2}}, \frac{\sin(x * \pi)}{\sqrt{2}}, \cos(x * \pi))\f$
   */
  static constexpr std::array<std::array<double, 2>, 25> llm = {
    { { { 7.0131492667e-05, 0.0071485561308244445 } }, { { 0.000116279802196, 0.018327932440800655 } },
      { { 0.000151872858397, 0.03167988232944343 } },  { { 0.000179879610822, 0.046417885731530835 } },
      { { 0.000202259338597, 0.06213106301582435 } },  { { 0.000220309310558, 0.07857193698102315 } },
      { { 0.00023492942343, 0.09558007711401575 } },   { { 0.000246768205875, 0.11304697548857842 } },
      { { 0.000256309268357, 0.13089748552923006 } },  { { 0.000263925389676, 0.14907913221786356 } },
      { { 0.000269913747927, 0.1675555923435256 } },   { { 0.000274519642017, 0.1863025548503725 } },
      { { 0.00027795291974, 0.20530501433081755 } },   { { 0.000280399608668, 0.22455545786553988 } },
      { { 0.000282030235672, 0.24405261231057868 } },  { { 0.000283005674749, 0.2638005234793376 } },
      { { 0.000283480895078, 0.28380778325245215 } },  { { 0.000283528233908, 0.3246523693301685 } },
      { { 0.000283381926707, 0.3455208724864761 } },   { { 0.000283285833691, 0.3667071021506386 } },
      { { 0.000283326823545, 0.3882209984773418 } },   { { 0.000283543267703, 0.4100624231974284 } },
      { { 0.000283909172274, 0.4322146629721852 } },   { { 0.000284330817888, 0.45463772672101627 } },
      { { 0.000284670355053, 0.47726402550022157 } } }
  };

  /** Number of points in each RSW block */
  static constexpr auto N_rsw = 48;
  /** Quadrature weight(s) and point(s) in RSW block.
   *
   * Each element is a {weight, x, y} tuple. The actual quadrature point in Cartesian coordinates is computed as
   * \f$(r, s, w) = (\sin(x * \pi)\cos(y * \pi), \sin(x * \pi)\sin(y * \pi), \cos(x*\pi))\f$
   */
  static constexpr std::array<std::array<double, 3>, 64> rsw = {
    { { { 0.000140306334017, 0.026756904116324767, 0.09083080758751778 } },
      { { 0.000169650412594, 0.040459352526304795, 0.13430432175017948 } },
      { { 0.000193578724275, 0.0554544547393813, 0.15941814239107843 } },
      { { 0.000213061451052, 0.07136296772926985, 0.1757119504803404 } },
      { { 0.000228938126593, 0.08795701444283947, 0.18712958944497504 } },
      { { 0.000241863029282, 0.10508921824591066, 0.19557825010237478 } },
      { { 0.000252340049563, 0.1226601236364336, 0.2020880151062703 } },
      { { 0.000260762397345, 0.14060108941846416, 0.20726238792918977 } },
      { { 0.000267444103269, 0.15886448968189493, 0.21147757945380982 } },
      { { 0.000272643236034, 0.1774177586022931, 0.21497977487366274 } },
      { { 0.000276578768592, 0.19623961744590462, 0.21793640505617762 } },
      { { 0.000279442869064, 0.21531760918682935, 0.22046489014207246 } },
      { { 0.000281409900206, 0.23464644121628148, 0.22264958119749648 } },
      { { 0.000282642953158, 0.2542268234215635, 0.22455216289232777 } },
      { { 0.000283298354255, 0.27406457883308355, 0.22621825664742723 } },
      { { 0.000188669556528, 0.051916664429042976, 0.05501179674321844 } },
      { { 0.000208186788275, 0.06678453710310651, 0.09105863130162835 } },
      { { 0.00022451486806, 0.08258593949522913, 0.11627645997800351 } },
      { { 0.000238037049151, 0.09908984525335837, 0.13483995090273831 } },
      { { 0.000249139804185, 0.1161458293078442, 0.14905719519611704 } },
      { { 0.000258163240588, 0.13365237154416265, 0.16029169857277037 } },
      { { 0.000265396550623, 0.15153958867365605, 0.16939470240128604 } },
      { { 0.000271085721675, 0.16975920517058327, 0.17692235335047635 } },
      { { 0.00027544340939, 0.18827843341350048, 0.18325181388522935 } },
      { { 0.000278657993252, 0.20707609536882474, 0.18864678068216575 } },
      { { 0.000280901108068, 0.2261400884151262, 0.19329619330299586 } },
      { { 0.000282333618456, 0.24546567532275862, 0.19733800814753286 } },
      { { 0.000283110117581, 0.26505426730152926, 0.20087427916745015 } },
      { { 0.000222167997035, 0.07979832354317783, 0.03949830261034868 } },
      { { 0.000235618573427, 0.09534128386361833, 0.06891040748433563 } },
      { { 0.000246922834481, 0.11161355018149274, 0.09153959162188663 } },
      { { 0.000256272634864, 0.12846408561275952, 0.10944239212094836 } },
      { { 0.000263875672675, 0.14578898429768233, 0.1239417629556266 } },
      { { 0.000269931115739, 0.16351589660362983, 0.13591741664833346 } },
      { { 0.00027462332684, 0.18159449395396565, 0.14597232165717597 } },
      { { 0.000278122567445, 0.1999904525586456, 0.15453084191052663 } },
      { { 0.000280588125405, 0.21868155531206285, 0.16189838002884194 } },
      { { 0.0002821719877, 0.23765510193417355, 0.1682987082021755 } },
      { { 0.000283022250233, 0.2569061311939487, 0.17389796113043032 } },
      { { 0.000245799595674, 0.1092829755281925, 0.030890470010366697 } },
      { { 0.00025514744075, 0.1252480716651396, 0.05556154047414795 } },
      { { 0.00026290653352, 0.14181409405591308, 0.07565207742708566 } },
      { { 0.000269190044993, 0.158878254201745, 0.09229787387370694 } },
      { { 0.000274127548575, 0.176367516257361, 0.10629906830213084 } },
      { { 0.000277853097012, 0.19423032464841863, 0.11822947861698856 } },
      { { 0.000280501056765, 0.21243113584373424, 0.12850763688584335 } },
      { { 0.000282205583403, 0.23094675049785268, 0.13744332669490386 } },
      { { 0.000283101690124, 0.24976380712614185, 0.14526847762670542 } },
      { { 0.000262447490113, 0.1397796059394766, 0.025444384185962215 } },
      { { 0.000268803416304, 0.15601550753152524, 0.04668994757217974 } },
      { { 0.000273893275129, 0.1727670547176668, 0.06465649877587272 } },
      { { 0.000277794479124, 0.18996309214808085, 0.08002536313162395 } },
      { { 0.000280601166166, 0.207552545893295, 0.09330534541074705 } },
      { { 0.00028241814566, 0.22549977830117915, 0.10487981947084465 } },
      { { 0.000283358521658, 0.24378135493302303, 0.11503990482943398 } },
      { { 0.000273816523696, 0.17092869125735938, 0.021705553310466683 } },
      { { 0.00027783652082, 0.18733470379039832, 0.04039638517653392 } },
      { { 0.000280785294042, 0.2041978490694884, 0.05663177954362433 } },
      { { 0.000282724594967, 0.22146931332121098, 0.07084407918181872 } },
      { { 0.000283734234483, 0.23911473396185762, 0.08336827537707991 } },
      { { 0.000280923390761, 0.20248705041668288, 0.01899015580987787 } },
      { { 0.000282993080974, 0.2189891780845841, 0.035714898791472535 } },
      { { 0.000284109787411, 0.2359076675622355, 0.05053191336752723 } },
      { { 0.000284345520601, 0.23427285444479826, 0.016932714566415905 } } }
  };

public:
  using Weights = Eigen::VectorXd;
  using Points = Eigen::Matrix3Xd;

  static auto quadrature() -> std::tuple<Weights, Points>
  {
    Weights ws = Weights::Zero(3890);
    Points xs = Points::Zero(3, 3890);

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<0>, Eigen::fix<N_a1>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<0>, Eigen::fix<N_a1>));
      std::tie(ws_, xs_) = detail::a1(a1);
    }

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1>, Eigen::fix<N_a2>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1>, Eigen::fix<N_a2>));
      std::tie(ws_, xs_) = detail::a2(a2);
    }

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a2>, Eigen::fix<N_a3>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1 + N_a2>, Eigen::fix<N_a3>));
      std::tie(ws_, xs_) = detail::a3(a3);
    }

    // number of pq0 values
    constexpr auto pq0_sz = pq0.size();
    detail::constexpr_for<0, pq0_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + i * N_pq0>, Eigen::fix<N_pq0>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + i * N_pq0>, Eigen::fix<N_pq0>));
      std::tie(ws_, xs_) = detail::pq0(pq0[i][0], pq0[i][1]);
    });

    // number of llm values
    constexpr auto llm_sz = llm.size();
    detail::constexpr_for<0, llm_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + pq0.size() * N_pq0 + i * N_llm>, Eigen::fix<N_llm>));
      auto xs_ = xs(Eigen::all,
                    Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + pq0.size() * N_pq0 + i * N_llm>, Eigen::fix<N_llm>));
      std::tie(ws_, xs_) = detail::llm(llm[i][0], llm[i][1]);
    });

    // number of rsw values
    constexpr auto rsw_sz = rsw.size();
    detail::constexpr_for<0, rsw_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + pq0.size() * N_pq0 + llm.size() * N_llm + i * N_rsw>,
                                Eigen::fix<N_rsw>));
      auto xs_ = xs(Eigen::all,
                    Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + pq0.size() * N_pq0 + llm.size() * N_llm + i * N_rsw>,
                                Eigen::fix<N_rsw>));
      std::tie(ws_, xs_) = detail::rsw(rsw[i][0], rsw[i][1], rsw[i][2]);
    });

    return { ws, xs };
  }
};
} // namespace detail

