
#pragma once

#include <array>
#include <tuple>

#include <Eigen/Core>

#include "lebedev_utils.hpp"
#include "utils/meta_utils.hpp"


namespace detail {
class Lebedev_095_3074 final
{
private:
  /** Number of points in A1 block */
  static constexpr auto N_a1 = 6;
  /** Quadrature weight in A1 block */
  static constexpr auto a1 = 2.5990959538e-05;

  /** Number of points in A2 block */
  static constexpr auto N_a2 = 12;
  /** Quadrature weight in A2 block */
  static constexpr auto a2 = 0.000360313408969;

  /** Number of points in A3 block */
  static constexpr auto N_a3 = 8;
  /** Quadrature weight in A3 block */
  static constexpr auto a3 = 0.000358606797441;

  /** Number of points in each PQ0 block */
  static constexpr auto N_pq0 = 24;
  /** Quadrature weight(s) and point(s) in PQ0 block.
   *
   * Each element is a {weight, x} tuple. The actual quadrature point in Cartesian coordinates is computed as \f$(p, q,
   * 0) = (\sin(x * \pi), \cos(x * \pi), 0)\f$
   */
  static constexpr std::array<std::array<double, 2>, 7> pq0 = { { { { 0.000145644709674, 0.01780632613066149 } },
                                                                  { { 0.000225237018828, 0.044947649826731696 } },
                                                                  { { 0.000276613544347, 0.07596872960251945 } },
                                                                  { { 0.00031107294915, 0.10909458634282024 } },
                                                                  { { 0.00033425067123, 0.14347412010759739 } },
                                                                  { { 0.000349198183403, 0.17861837137640935 } },
                                                                  { { 0.000357600360435, 0.2142066684242369 } } } };

  /** Number of points in each LLM block */
  static constexpr auto N_llm = 24;
  /** Quadrature weight(s) and point(s) in LLM block.
   *
   * Each element is a {weight, x} tuple. The actual quadrature point in Cartesian coordinates is computed as
   * \f$(l, l, m) = (\frac{\sin(x * \pi)}{\sqrt{2}}, \frac{\sin(x * \pi)}{\sqrt{2}}, \cos(x * \pi))\f$
   */
  static constexpr std::array<std::array<double, 2>, 22> llm = {
    { { { 9.8315284744e-05, 0.008491478491336383 } }, { { 0.000160502310795, 0.0216252009289231 } },
      { { 0.000207220013146, 0.03719980947578939 } }, { { 0.000243129761881, 0.05430034267672929 } },
      { { 0.00027118190645, 0.07245921913487467 } },  { { 0.000293276203832, 0.09140116470751057 } },
      { { 0.00031070325142, 0.1109520797855045 } },   { { 0.000324380805892, 0.13099759338729772 } },
      { { 0.000334989909137, 0.15146147974388993 } }, { { 0.000343058068851, 0.1722934370888343 } },
      { { 0.000349012410929, 0.19346178184185475 } }, { { 0.000353214894856, 0.2149489150562011 } },
      { { 0.000355986266906, 0.23674841919071238 } }, { { 0.000357622431755, 0.2588631079592939 } },
      { { 0.000358405053309, 0.28130355966846415 } }, { { 0.000358490358137, 0.32723414474220325 } },
      { { 0.000358299187904, 0.35076920668375916 } }, { { 0.000358237118796, 0.37471263299687224 } },
      { { 0.000358435363112, 0.3990753718567368 } },  { { 0.000358912016652, 0.42384837461845704 } },
      { { 0.000359544570453, 0.44899023881292777 } }, { { 0.000360094355711, 0.4744167749955591 } } }
  };

  /** Number of points in each RSW block */
  static constexpr auto N_rsw = 48;
  /** Quadrature weight(s) and point(s) in RSW block.
   *
   * Each element is a {weight, x, y} tuple. The actual quadrature point in Cartesian coordinates is computed as
   * \f$(r, s, w) = (\sin(x * \pi)\cos(y * \pi), \sin(x * \pi)\sin(y * \pi), \cos(x*\pi))\f$
   */
  static constexpr std::array<std::array<double, 3>, 49> rsw = {
    { { { 0.000192192130579, 0.031465662351515905, 0.09085164306768208 } },
      { { 0.00023014582165, 0.047391274897813765, 0.13435012987204045 } },
      { { 0.000260424854952, 0.06474365273393522, 0.15949159054664724 } },
      { { 0.000284527542587, 0.08309105162827109, 0.17581481825424403 } },
      { { 0.000303687089797, 0.10217994835018449, 0.18726279838436768 } },
      { { 0.00031884148323, 0.12185054471509318, 0.19574180715936648 } },
      { { 0.000330704641472, 0.14199834411329149, 0.2022809630751209 } },
      { { 0.000339833096903, 0.16255425833037224, 0.20748271274310928 } },
      { { 0.000346675789971, 0.1834734047562495, 0.2117220650020316 } },
      { { 0.000351609592323, 0.20472843521609305, 0.21524379429238114 } },
      { { 0.000354964518405, 0.22630540159341608, 0.21821363386661324 } },
      { { 0.000357041596944, 0.2482010920943633, 0.22074692285287065 } },
      { { 0.00035812517985, 0.27042119121176594, 0.22292542923153252 } },
      { { 0.000254349132991, 0.06064339323452652, 0.055057764324450115 } },
      { { 0.000278671105133, 0.07779507453052478, 0.09116229894048221 } },
      { { 0.000298555236108, 0.0959746938704924, 0.11644339534113997 } },
      { { 0.000314586792915, 0.11492342603434177, 0.13507225317618396 } },
      { { 0.000327329066207, 0.13447671452436294, 0.14935442403997615 } },
      { { 0.000337270551194, 0.1545268389697898, 0.16065112739682047 } },
      { { 0.000344827443785, 0.17500276656351987, 0.16981124601058925 } },
      { { 0.000350359278305, 0.19585862595374656, 0.17738828884663443 } },
      { { 0.000354185479266, 0.21706680119919253, 0.18375632088577024 } },
      { { 0.000356599551791, 0.23861363429976987, 0.1891752884830942 } },
      { { 0.00035788020783, 0.2604966284261268, 0.1938295025157241 } },
      { { 0.000295864459286, 0.09274427704983511, 0.0395737232927744 } },
      { { 0.000311954812912, 0.11057845952784265, 0.06907763088162186 } },
      { { 0.000325074522501, 0.12921937707613373, 0.09180631818787073 } },
      { { 0.000335515341594, 0.14850101251605247, 0.10981020998375317 } },
      { { 0.000343584756855, 0.16831231500083096, 0.12440734609770791 } },
      { { 0.000349578683162, 0.188579058802564, 0.13647287735999802 } },
      { { 0.000353776780553, 0.20925288683827323, 0.14660501010704388 } },
      { { 0.000356445981542, 0.23030450756758208, 0.1552227164749716 } },
      { { 0.000357846406123, 0.2517193463622896, 0.16262497682493987 } },
      { { 0.000323974876284, 0.12650692621088908, 0.030997494536175008 } },
      { { 0.000334549178417, 0.14474962575433292, 0.05579389682143906 } },
      { { 0.00034291261773, 0.16366334732767546, 0.0760175394141712 } },
      { { 0.00034924203431, 0.1831382423052164, 0.09279551520127183 } },
      { { 0.000353739905024, 0.20309929262528792, 0.1069200932593852 } },
      { { 0.000356620915266, 0.22349687087566739, 0.1189572114735275 } },
      { { 0.000358108432192, 0.24430059419858002, 0.12931678922977702 } },
      { { 0.000342652211759, 0.1612750766348191, 0.025582990466131734 } },
      { { 0.000349184877012, 0.17976340654842216, 0.04698470477753579 } },
      { { 0.000353931823523, 0.19883523525711896, 0.06511234997254838 } },
      { { 0.000357023143846, 0.21841811256686908, 0.08063545461473559 } },
      { { 0.000358620733505, 0.23846345426669463, 0.09405097152337796 } },
      { { 0.000354119620516, 0.19664915215120718, 0.02187331846961495 } },
      { { 0.000357429691157, 0.21527283022919985, 0.0407454681687205 } },
      { { 0.000359199327982, 0.23442242541551717, 0.05716016707015379 } },
      { { 0.000359585503466, 0.23235214507614843, 0.019181495137045916 } } }
  };

public:
  using Weights = Eigen::VectorXd;
  using Points = Eigen::Matrix3Xd;

  static auto quadrature() -> std::tuple<Weights, Points>
  {
    Weights ws = Weights::Zero(3074);
    Points xs = Points::Zero(3, 3074);

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<0>, Eigen::fix<N_a1>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<0>, Eigen::fix<N_a1>));
      std::tie(ws_, xs_) = detail::a1(a1);
    }

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1>, Eigen::fix<N_a2>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1>, Eigen::fix<N_a2>));
      std::tie(ws_, xs_) = detail::a2(a2);
    }

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a2>, Eigen::fix<N_a3>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1 + N_a2>, Eigen::fix<N_a3>));
      std::tie(ws_, xs_) = detail::a3(a3);
    }

    // number of pq0 values
    constexpr auto pq0_sz = pq0.size();
    detail::constexpr_for<0, pq0_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + i * N_pq0>, Eigen::fix<N_pq0>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + i * N_pq0>, Eigen::fix<N_pq0>));
      std::tie(ws_, xs_) = detail::pq0(pq0[i][0], pq0[i][1]);
    });

    // number of llm values
    constexpr auto llm_sz = llm.size();
    detail::constexpr_for<0, llm_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + pq0.size() * N_pq0 + i * N_llm>, Eigen::fix<N_llm>));
      auto xs_ = xs(Eigen::all,
                    Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + pq0.size() * N_pq0 + i * N_llm>, Eigen::fix<N_llm>));
      std::tie(ws_, xs_) = detail::llm(llm[i][0], llm[i][1]);
    });

    // number of rsw values
    constexpr auto rsw_sz = rsw.size();
    detail::constexpr_for<0, rsw_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + pq0.size() * N_pq0 + llm.size() * N_llm + i * N_rsw>,
                                Eigen::fix<N_rsw>));
      auto xs_ = xs(Eigen::all,
                    Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + pq0.size() * N_pq0 + llm.size() * N_llm + i * N_rsw>,
                                Eigen::fix<N_rsw>));
      std::tie(ws_, xs_) = detail::rsw(rsw[i][0], rsw[i][1], rsw[i][2]);
    });

    return { ws, xs };
  }
};
} // namespace detail

