
#pragma once

#include <array>
#include <tuple>

#include <Eigen/Core>

#include "lebedev_utils.hpp"
#include "utils/meta_utils.hpp"


namespace detail {
class Lebedev_113_4334 final
{
private:
  /** Number of points in A1 block */
  static constexpr auto N_a1 = 6;
  /** Quadrature weight in A1 block */
  static constexpr auto a1 = 1.4490630225e-05;

  /** Number of points in A3 block */
  static constexpr auto N_a3 = 8;
  /** Quadrature weight in A3 block */
  static constexpr auto a3 = 0.000254637732983;

  /** Number of points in each PQ0 block */
  static constexpr auto N_pq0 = 24;
  /** Quadrature weight(s) and point(s) in PQ0 block.
   *
   * Each element is a {weight, x} tuple. The actual quadrature point in Cartesian coordinates is computed as \f$(p, q,
   * 0) = (\sin(x * \pi), \cos(x * \pi), 0)\f$
   */
  static constexpr std::array<std::array<double, 2>, 9> pq0 = { { { { 9.0413396951e-05, 0.01395351910027634 } },
                                                                  { { 0.000143842633008, 0.03564475435943178 } },
                                                                  { { 0.000180252308982, 0.06075650766272976 } },
                                                                  { { 0.000206005229057, 0.08781815498619268 } },
                                                                  { { 0.000224500224897, 0.1161037280905153 } },
                                                                  { { 0.000237705984773, 0.1451911777915669 } },
                                                                  { { 0.000246811895588, 0.1748076813565832 } },
                                                                  { { 0.000252541087297, 0.20476035016396732 } },
                                                                  { { 0.000255310140993, 0.23490008480656582 } } } };

  /** Number of points in each LLM block */
  static constexpr auto N_llm = 24;
  /** Quadrature weight(s) and point(s) in LLM block.
   *
   * Each element is a {weight, x} tuple. The actual quadrature point in Cartesian coordinates is computed as
   * \f$(l, l, m) = (\frac{\sin(x * \pi)}{\sqrt{2}}, \frac{\sin(x * \pi)}{\sqrt{2}}, \cos(x * \pi))\f$
   */
  static constexpr std::array<std::array<double, 2>, 27> llm = {
    { { { 6.0184329611e-05, 0.006585816231197478 } }, { { 0.000100228658326, 0.016978295465352695 } },
      { { 0.000131522293103, 0.02941331824582966 } }, { { 0.000156421374688, 0.043169783569429236 } },
      { { 0.000176511884151, 0.0578634928222984 } },  { { 0.000192873709931, 0.0732598925247085 } },
      { { 0.000206265853426, 0.08920530725497784 } }, { { 0.000217239544595, 0.10559463062493106 } },
      { { 0.000226207618888, 0.12235408447801092 } }, { { 0.000233488569946, 0.13943121879271939 } },
      { { 0.000239335527318, 0.15678876578702314 } }, { { 0.000243955920047, 0.1744007029170554 } },
      { { 0.000247525186606, 0.19224965345551862 } }, { { 0.000250196555816, 0.21032512985560742 } },
      { { 0.000252108140793, 0.22862231991444856 } }, { { 0.000253388100239, 0.24714121928482902 } },
      { { 0.000254158290085, 0.2658859667561476 } },  { { 0.000254536573753, 0.2848642596496941 } },
      { { 0.000254572699307, 0.32356609144151754 } }, { { 0.000254445619747, 0.34331599608608754 } },
      { { 0.000254348159688, 0.3633491580535364 } },  { { 0.000254350645143, 0.3836746960299212 } },
      { { 0.000254490567549, 0.40429436689368065 } }, { { 0.000254761140734, 0.42519777898583205 } },
      { { 0.000255106037545, 0.4463571967002744 } },  { { 0.000255429193382, 0.46772345842817015 } },
      { { 0.000255625571069, 0.48922536088416635 } } }
  };

  /** Number of points in each RSW block */
  static constexpr auto N_rsw = 48;
  /** Quadrature weight(s) and point(s) in RSW block.
   *
   * Each element is a {weight, x, y} tuple. The actual quadrature point in Cartesian coordinates is computed as
   * \f$(r, s, w) = (\sin(x * \pi)\cos(y * \pi), \sin(x * \pi)\sin(y * \pi), \cos(x*\pi))\f$
   */
  static constexpr std::array<std::array<double, 3>, 72> rsw = {
    { { { 0.000121287973367, 0.024826589435509375, 0.0908248642928678 } },
      { { 0.000147287288127, 0.037606188116090074, 0.1342878583229538 } },
      { { 0.000168684660101, 0.0516193731380104, 0.15939135798995077 } },
      { { 0.000186269841466, 0.06650966630500786, 0.17567417436057192 } },
      { { 0.000200743095699, 0.08206086361827945, 0.1870803281699501 } },
      { { 0.000212656812539, 0.0981317134254003, 0.19551731006557105 } },
      { { 0.000222439460337, 0.11462577117871149, 0.20201550707789287 } },
      { { 0.000230426452267, 0.13147548980645138, 0.2071787435809739 } },
      { { 0.000236885428842, 0.14863304930313578, 0.21138358163535922 } },
      { { 0.000242035208946, 0.16606474079324737, 0.2148766028862085 } },
      { { 0.000246059711308, 0.1837473764690447, 0.21782569788152228 } },
      { { 0.000249118191226, 0.20166592160345528, 0.22034883112475293 } },
      { { 0.000251352819421, 0.21981189295629958, 0.2225310084267689 } },
      { { 0.000252894309669, 0.23818224552443168, 0.22443471048535044 } },
      { { 0.000253866036849, 0.25677856177883723, 0.22610653295319816 } },
      { { 0.00025438686483, 0.27560640179835677, 0.22758153244769486 } },
      { { 0.000164259553783, 0.04831461121000753, 0.05499504063762987 } },
      { { 0.000181824665985, 0.06222842684158024, 0.09102068134770995 } },
      { { 0.000196656564949, 0.07703482709451791, 0.11621496759054711 } },
      { { 0.000209067790566, 0.09251523213636802, 0.13475379353131628 } },
      { { 0.000219382040951, 0.10852596759005421, 0.1489461063744023 } },
      { { 0.000227887082766, 0.1249689648253517, 0.1601561392514306 } },
      { { 0.000234828319228, 0.14177572300314545, 0.1692358469424084 } },
      { { 0.000240413975558, 0.15889794103947424, 0.17674213745131875 } },
      { { 0.000244822740776, 0.17630176075307522, 0.18305302984992092 } },
      { { 0.000248211045559, 0.19396408868298623, 0.18843321874381722 } },
      { { 0.000250719239777, 0.21187017371002143, 0.19307283341108633 } },
      { { 0.000252476596853, 0.23001196873927823, 0.19711127029607975 } },
      { { 0.000253605238854, 0.24838698574725807, 0.20065234310909458 } },
      { { 0.000254223058803, 0.26699744672128584, 0.20377418448763945 } },
      { { 0.000194481701305, 0.07442936765504839, 0.039470594067149686 } },
      { { 0.000206786236275, 0.08901110116005964, 0.0688486136011633 } },
      { { 0.000217244073465, 0.10428954517870051, 0.09144037638194737 } },
      { { 0.000226012599172, 0.12012073149104222, 0.10930450155735087 } },
      { { 0.000233265500869, 0.1364045907260432, 0.12376554372835964 } },
      { { 0.000239169968153, 0.15307047844898988, 0.13570462132681513 } },
      { { 0.000243880152827, 0.17006826863661167, 0.14572608901094675 } },
      { { 0.000247537050426, 0.18736269844263126, 0.15425580022289115 } },
      { { 0.000250270723564, 0.20492967773521928, 0.16160085306526273 } },
      { { 0.000252203170105, 0.22275382270295324, 0.16798702094555565 } },
      { { 0.000253451126998, 0.2408267667834625, 0.17358285311213922 } },
      { { 0.000254128491496, 0.2591459616458878, 0.17851556927875667 } },
      { { 0.000216150925069, 0.10211385382509494, 0.030850773488741746 } },
      { { 0.000224877851344, 0.11712040979083312, 0.05547481380152686 } },
      { { 0.00023223888034, 0.1326993646352754, 0.07551459268545714 } },
      { { 0.0002383265471, 0.14875177504139472, 0.0921087716174105 } },
      { { 0.000243247667502, 0.16520641479475065, 0.10605995278531749 } },
      { { 0.000247112222375, 0.18201203094918025, 0.11794427840769996 } },
      { { 0.000250029175249, 0.1991321936189417, 0.128182675304197 } },
      { { 0.000252105594276, 0.2165418190268875, 0.13708757148351533 } },
      { { 0.000253447278558, 0.2342247843627668, 0.14489396078472272 } },
      { { 0.000254159971308, 0.25217225663713383, 0.15178037729635585 } },
      { { 0.000231738097586, 0.1308054997681273, 0.025392421503900364 } },
      { { 0.000237855073372, 0.14609070788493705, 0.04657856450417362 } },
      { { 0.000242888445674, 0.16186487468085262, 0.06448240565753134 } },
      { { 0.000246900265576, 0.17805847354917337, 0.07978898607750695 } },
      { { 0.000249965757427, 0.19462062582320694, 0.09301063055413772 } },
      { { 0.000252167616849, 0.21151470568331482, 0.10453429327190089 } },
      { { 0.000253593566265, 0.2287152612822803, 0.11465498130210473 } },
      { { 0.000254335674336, 0.24620583798071274, 0.12359931585974145 } },
      { { 0.00024273532852, 0.16016126954688778, 0.02164176799462574 } },
      { { 0.000246825803974, 0.1756281367713069, 0.040262151621323544 } },
      { { 0.000250006095644, 0.1915259595649753, 0.0564253370646936 } },
      { { 0.000252323836542, 0.20780580420347788, 0.07056847433588244 } },
      { { 0.000253839926025, 0.2244320402039764, 0.08303151320792289 } },
      { { 0.000254625592727, 0.24137974530984346, 0.09407979930524346 } },
      { { 0.000250058336005, 0.18995037336148488, 0.0189158592586531 } },
      { { 0.000252477763826, 0.20552859578566893, 0.03556160535882843 } },
      { { 0.000254095119386, 0.22149662453058616, 0.0503009173850905 } },
      { { 0.000254952408503, 0.23782091848765186, 0.06342356231621332 } },
      { { 0.000254256950701, 0.2200030512470934, 0.016850394351916542 } },
      { { 0.000255211412758, 0.2356367624036941, 0.03193333194586681 } } }
  };

public:
  using Weights = Eigen::VectorXd;
  using Points = Eigen::Matrix3Xd;

  static auto quadrature() -> std::tuple<Weights, Points>
  {
    Weights ws = Weights::Zero(4334);
    Points xs = Points::Zero(3, 4334);

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<0>, Eigen::fix<N_a1>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<0>, Eigen::fix<N_a1>));
      std::tie(ws_, xs_) = detail::a1(a1);
    }

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1>, Eigen::fix<N_a3>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1>, Eigen::fix<N_a3>));
      std::tie(ws_, xs_) = detail::a3(a3);
    }

    // number of pq0 values
    constexpr auto pq0_sz = pq0.size();
    detail::constexpr_for<0, pq0_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a3 + i * N_pq0>, Eigen::fix<N_pq0>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1 + N_a3 + i * N_pq0>, Eigen::fix<N_pq0>));
      std::tie(ws_, xs_) = detail::pq0(pq0[i][0], pq0[i][1]);
    });

    // number of llm values
    constexpr auto llm_sz = llm.size();
    detail::constexpr_for<0, llm_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a3 + pq0.size() * N_pq0 + i * N_llm>, Eigen::fix<N_llm>));
      auto xs_ =
        xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1 + N_a3 + pq0.size() * N_pq0 + i * N_llm>, Eigen::fix<N_llm>));
      std::tie(ws_, xs_) = detail::llm(llm[i][0], llm[i][1]);
    });

    // number of rsw values
    constexpr auto rsw_sz = rsw.size();
    detail::constexpr_for<0, rsw_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(
        Eigen::seqN(Eigen::fix<+N_a1 + N_a3 + pq0.size() * N_pq0 + llm.size() * N_llm + i * N_rsw>, Eigen::fix<N_rsw>));
      auto xs_ = xs(
        Eigen::all,
        Eigen::seqN(Eigen::fix<+N_a1 + N_a3 + pq0.size() * N_pq0 + llm.size() * N_llm + i * N_rsw>, Eigen::fix<N_rsw>));
      std::tie(ws_, xs_) = detail::rsw(rsw[i][0], rsw[i][1], rsw[i][2]);
    });

    return { ws, xs };
  }
};
} // namespace detail

