
#pragma once

#include <array>
#include <tuple>

#include <Eigen/Core>

#include "lebedev_utils.hpp"
#include "utils/meta_utils.hpp"


namespace detail {
class Lebedev_119_4802 final
{
private:
  /** Number of points in A1 block */
  static constexpr auto N_a1 = 6;
  /** Quadrature weight in A1 block */
  static constexpr auto a1 = 9.6875218794e-05;

  /** Number of points in A2 block */
  static constexpr auto N_a2 = 12;
  /** Quadrature weight in A2 block */
  static constexpr auto a2 = 0.000230789789537;

  /** Number of points in A3 block */
  static constexpr auto N_a3 = 8;
  /** Quadrature weight in A3 block */
  static constexpr auto a3 = 0.00022973108525;

  /** Number of points in each PQ0 block */
  static constexpr auto N_pq0 = 24;
  /** Quadrature weight(s) and point(s) in PQ0 block.
   *
   * Each element is a {weight, x} tuple. The actual quadrature point in Cartesian coordinates is computed as \f$(p, q,
   * 0) = (\sin(x * \pi), \cos(x * \pi), 0)\f$
   */
  static constexpr std::array<std::array<double, 2>, 9> pq0 = { { { { 9.3122746967e-05, 0.0146332680932937 } },
                                                                  { { 0.000119991938588, 0.033462389092328126 } },
                                                                  { { 0.000159803913888, 0.056754040342175384 } },
                                                                  { { 0.000182225376357, 0.08237413424373077 } },
                                                                  { { 0.000198857959366, 0.10901192711829599 } },
                                                                  { { 0.000211262010253, 0.1364226239795359 } },
                                                                  { { 0.00022015948877, 0.1643886421891819 } },
                                                                  { { 0.00022616225909, 0.19273033095644077 } },
                                                                  { { 0.000229645845344, 0.22130770601583696 } } } };

  /** Number of points in each LLM block */
  static constexpr auto N_llm = 24;
  /** Quadrature weight(s) and point(s) in LLM block.
   *
   * Each element is a {weight, x} tuple. The actual quadrature point in Cartesian coordinates is computed as
   * \f$(l, l, m) = (\frac{\sin(x * \pi)}{\sqrt{2}}, \frac{\sin(x * \pi)}{\sqrt{2}}, \cos(x * \pi))\f$
   */
  static constexpr std::array<std::array<double, 2>, 28> llm = {
    { { { 7.386265944e-05, 0.010516385924747362 } },  { { 8.2579776985e-05, 0.01960772775995671 } },
      { { 9.7060447621e-05, 0.029026799358814248 } }, { { 0.000130239384712, 0.04064232608924972 } },
      { { 0.00015419570046, 0.05413125885790828 } },  { { 0.000170445977009, 0.0685804508011497 } },
      { { 0.000182737489094, 0.08360626770987507 } }, { { 0.000192636081744, 0.09905386070706378 } },
      { { 0.000200801023949, 0.11484429655220994 } }, { { 0.000207563598321, 0.1309296441999107 } },
      { { 0.000213130663869, 0.14727734560668404 } }, { { 0.000217656232994, 0.16386387750530554 } },
      { { 0.000221268226299, 0.18067214609683985 } }, { { 0.000224079951567, 0.19769037475978798 } },
      { { 0.000226195981619, 0.21491150246675975 } }, { { 0.000227715636881, 0.23233272360089904 } },
      { { 0.000228735177213, 0.24995505609031266 } }, { { 0.000229349081408, 0.26778290225548135 } },
      { { 0.000229650531238, 0.2858235728148527 } },  { { 0.000229679383232, 0.32258362430889304 } },
      { { 0.000229578544384, 0.34132612734755713 } }, { { 0.000229501793153, 0.36032518829756327 } },
      { { 0.000229505963818, 0.3795887501505544 } },  { { 0.000229623234324, 0.39911888341587753 } },
      { { 0.000229853017874, 0.41890825413607846 } }, { { 0.000230157979028, 0.43893634985964675 } },
      { { 0.0002304690405, 0.45916635731392214 } },   { { 0.000230702799591, 0.479544033952301 } } }
  };

  /** Number of points in each RSW block */
  static constexpr auto N_rsw = 48;
  /** Quadrature weight(s) and point(s) in RSW block.
   *
   * Each element is a {weight, x, y} tuple. The actual quadrature point in Cartesian coordinates is computed as
   * \f$(r, s, w) = (\sin(x * \pi)\cos(y * \pi), \sin(x * \pi)\sin(y * \pi), \cos(x*\pi))\f$
   */
  static constexpr std::array<std::array<double, 3>, 81> rsw = {
    { { { 0.000100600699027, 0.024410278130508934, 0.09175097440381855 } },
      { { 0.000122767668964, 0.035382715864839764, 0.13580210539409612 } },
      { { 0.000146786428027, 0.04824937260174046, 0.1595329984958098 } },
      { { 0.00016441789121, 0.06222127451120022, 0.175570973816619 } },
      { { 0.000177766489072, 0.07687723706632836, 0.18699808292305223 } },
      { { 0.000188482566452, 0.09202660230625842, 0.1954681847329587 } },
      { { 0.000197326924645, 0.10756867024480242, 0.20197548955720607 } },
      { { 0.000204676777586, 0.12344093669929387, 0.2071332287067197 } },
      { { 0.000210760012592, 0.1396011381789425, 0.21132699380742836 } },
      { { 0.000215741636227, 0.15601912401447615, 0.21480749208731725 } },
      { { 0.000219755781692, 0.1726728923897927, 0.21774450760799194 } },
      { { 0.000222919261184, 0.18954672467673767, 0.2202572812532938 } },
      { { 0.000225338511021, 0.20663024212585462, 0.2224319000221757 } },
      { { 0.000227113710755, 0.22391779598328637, 0.22433175890594728 } },
      { { 0.000228341409292, 0.2414079623318483, 0.2260042041096887 } },
      { { 0.000229116167313, 0.2591030657931698, 0.22748493626130054 } },
      { { 0.000229531390858, 0.2770086955430346, 0.22880101820767618 } },
      { { 0.000143820472136, 0.04501651621402635, 0.055276282182960136 } },
      { { 0.00016077380255, 0.05816875882975513, 0.09089178652706655 } },
      { { 0.000174148385353, 0.07215649008228939, 0.1160658476889212 } },
      { { 0.000185191846752, 0.08675285245557454, 0.13466287782191522 } },
      { { 0.000194462863807, 0.10183705003414102, 0.14888184667192184 } },
      { { 0.000202249544628, 0.11732491972964101, 0.1600864160943806 } },
      { { 0.000208746238244, 0.13315529432199105, 0.1691458307135706 } },
      { { 0.000214107475482, 0.1492840020002418, 0.1766270877279356 } },
      { { 0.000218464091375, 0.16567897781060953, 0.18291259640483867 } },
      { { 0.000221930916522, 0.1823169741616184, 0.18826959652404424 } },
      { { 0.000224612311834, 0.19918168092900812, 0.19289039405464387 } },
      { { 0.000226606276692, 0.21626262386917275, 0.1969163586572439 } },
      { { 0.000228007295223, 0.23355439892994348, 0.20045299271403422 } },
      { { 0.00022890820252, 0.2510560436291886, 0.20357985431538875 } },
      { { 0.000229401269512, 0.2687704628528671, 0.20635731909135352 } },
      { { 0.000172243448874, 0.06972095562696587, 0.03937828898750104 } },
      { { 0.000183023742146, 0.0834802867612743, 0.0687652149920336 } },
      { { 0.000192385535, 0.09786867271227233, 0.09138006252435742 } },
      { { 0.000200406786194, 0.11277518194583593, 0.10923879941714051 } },
      { { 0.000207181729735, 0.12811231242293247, 0.12367272022505514 } },
      { { 0.00021282508341, 0.14381388857638544, 0.13557553914812265 } },
      { { 0.000217451371944, 0.15983162224390302, 0.14555844267897486 } },
      { { 0.000221166183915, 0.17613046963974818, 0.15405091609008043 } },
      { { 0.000224066525781, 0.1926851521571052, 0.16136311154174407 } },
      { { 0.000226243951663, 0.2094780676834112, 0.16772384900060022 } },
      { { 0.000227787455723, 0.2264980152542648, 0.17330450249100102 } },
      { { 0.000228785431445, 0.24373928716683302, 0.17823474250845384 } },
      { { 0.000229326849962, 0.26120092361521785, 0.18261331449142987 } },
      { { 0.000191262820153, 0.09583855500358501, 0.03082648621752783 } },
      { { 0.000199249967224, 0.10996392769038052, 0.055437285128824246 } },
      { { 0.000206127553345, 0.12463585758948627, 0.07544793350614502 } },
      { { 0.000211931821597, 0.13976275969351334, 0.09199979513457514 } },
      { { 0.000216741658188, 0.15527533859903808, 0.10590256029388166 } },
      { { 0.000220643073052, 0.17112279130974364, 0.11773708480210619 } },
      { { 0.00022371869387, 0.18726799085545387, 0.12792807449444732 } },
      { { 0.000226048007503, 0.2036840049482704, 0.13679195959290727 } },
      { { 0.000227709888456, 0.22035202512766836, 0.14456781959171353 } },
      { { 0.000228784571511, 0.23726007126828003, 0.15143795264924456 } },
      { { 0.000229354726824, 0.25440202881169705, 0.15754212552618363 } },
      { { 0.000205607383985, 0.12285883675780981, 0.025368727813601492 } },
      { { 0.000211423586583, 0.1372666260886485, 0.04651691804056091 } },
      { { 0.000216317562977, 0.15214524225422435, 0.06437073412769535 } },
      { { 0.000220339215811, 0.1674261668872002, 0.07962053127339411 } },
      { { 0.000223547317685, 0.18305841978191756, 0.09278334975812079 } },
      { { 0.00022600241415, 0.199004129933758, 0.10425098426147628 } },
      { { 0.000227767592933, 0.215235481179111, 0.11432372391005954 } },
      { { 0.000228910211228, 0.2317329159397003, 0.12323345302858435 } },
      { { 0.000229502795463, 0.24848396150511579, 0.13115990614661632 } },
      { { 0.000216128158988, 0.15054956776138143, 0.021601407141936407 } },
      { { 0.00022019804774, 0.16515510453413385, 0.04016757966644758 } },
      { { 0.000223495206659, 0.18017406638553224, 0.056267816815705245 } },
      { { 0.000226054009852, 0.19555697106582798, 0.07034473170523621 } },
      { { 0.00022791579819, 0.21126635077307532, 0.0827443735520565 } },
      { { 0.000229129691857, 0.22727433676348735, 0.09373867305497706 } },
      { { 0.000229753375254, 0.24356125198500728, 0.10354168759119256 } },
      { { 0.000223492735647, 0.17870662368990595, 0.018859462807990477 } },
      { { 0.000226128801299, 0.1934430242451004, 0.03543791473633499 } },
      { { 0.000228081816092, 0.20855095383964517, 0.050105227346792444 } },
      { { 0.000229377329518, 0.22399430105042561, 0.06315837295756885 } },
      { { 0.000230052876734, 0.2397459789338036, 0.07483570742956569 } },
      { { 0.000228189385507, 0.20717093634853642, 0.01678089014665939 } },
      { { 0.000229572044484, 0.2219848201259305, 0.031787958381561086 } },
      { { 0.000230322764903, 0.23713798916789933, 0.045271244754101284 } },
      { { 0.000230483191323, 0.23581330991926575, 0.015154107595876577 } } }
  };

public:
  using Weights = Eigen::VectorXd;
  using Points = Eigen::Matrix3Xd;

  static auto quadrature() -> std::tuple<Weights, Points>
  {
    Weights ws = Weights::Zero(4802);
    Points xs = Points::Zero(3, 4802);

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<0>, Eigen::fix<N_a1>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<0>, Eigen::fix<N_a1>));
      std::tie(ws_, xs_) = detail::a1(a1);
    }

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1>, Eigen::fix<N_a2>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1>, Eigen::fix<N_a2>));
      std::tie(ws_, xs_) = detail::a2(a2);
    }

    {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a2>, Eigen::fix<N_a3>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1 + N_a2>, Eigen::fix<N_a3>));
      std::tie(ws_, xs_) = detail::a3(a3);
    }

    // number of pq0 values
    constexpr auto pq0_sz = pq0.size();
    detail::constexpr_for<0, pq0_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + i * N_pq0>, Eigen::fix<N_pq0>));
      auto xs_ = xs(Eigen::all, Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + i * N_pq0>, Eigen::fix<N_pq0>));
      std::tie(ws_, xs_) = detail::pq0(pq0[i][0], pq0[i][1]);
    });

    // number of llm values
    constexpr auto llm_sz = llm.size();
    detail::constexpr_for<0, llm_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + pq0.size() * N_pq0 + i * N_llm>, Eigen::fix<N_llm>));
      auto xs_ = xs(Eigen::all,
                    Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + pq0.size() * N_pq0 + i * N_llm>, Eigen::fix<N_llm>));
      std::tie(ws_, xs_) = detail::llm(llm[i][0], llm[i][1]);
    });

    // number of rsw values
    constexpr auto rsw_sz = rsw.size();
    detail::constexpr_for<0, rsw_sz, 1>([&xs, &ws](auto i) {
      auto ws_ = ws(Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + pq0.size() * N_pq0 + llm.size() * N_llm + i * N_rsw>,
                                Eigen::fix<N_rsw>));
      auto xs_ = xs(Eigen::all,
                    Eigen::seqN(Eigen::fix<+N_a1 + N_a2 + N_a3 + pq0.size() * N_pq0 + llm.size() * N_llm + i * N_rsw>,
                                Eigen::fix<N_rsw>));
      std::tie(ws_, xs_) = detail::rsw(rsw[i][0], rsw[i][1], rsw[i][2]);
    });

    return { ws, xs };
  }
};
} // namespace detail

